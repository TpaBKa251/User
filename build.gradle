plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
}

group = 'ru.tpu.hostel'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

def repoUser = project.findProperty("privateRepoUsername") ?: System.getenv("INTERNAL_REPO_LOGIN")
def repoPass = project.findProperty("privateRepoPassword") ?: System.getenv("INTERNAL_REPO_PASSWORD")

repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven {
        url "http://82.202.138.26:8081/repository/internal/"
        allowInsecureProtocol = true
        credentials {
            username = repoUser
            password = repoPass
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "TpaBKa251_User"
        property "sonar.organization", "hostel-service" // Замените на имя вашей организации
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_TOKEN") // Используется токен из секретов GitHub
        property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml")
        property "sonar.coverage.exclusions", "**/*Generated*.java,**/model/*.java" // Исключения из анализа
        property "sonar.java.binaries", "build/classes/java/main" // Путь к скомпилированным классам
    }
}

dependencies {
    implementation 'ru.tpu.hostel:hostel-core:1.0.10'
    implementation 'ru.tpu.hostel:hostel-feign:1.0.10'

    compileOnly 'javax.servlet:javax.servlet-api:4.0.1'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:2023.0.2")
    implementation 'commons-io:commons-io:2.14.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    runtimeOnly 'org.postgresql:postgresql'
    implementation "org.flywaydb:flyway-database-postgresql"
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.37.0'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
    testImplementation 'org.mockito:mockito-core:5.2.0'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testImplementation 'org.instancio:instancio-core:2.13.0'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // Генерируем отчет после тестов
}

jacoco {
    toolVersion = "0.8.11" // Версия JaCoCo
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true) // Включаем XML для SonarCloud
        html.required.set(false)
        csv.required.set(false)
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'ru.tpu.hostel.user.UserApplication'
    }
}
