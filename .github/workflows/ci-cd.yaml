name: CI/CD for Papich via SSH

on:
  push:
    branches:
      - master

jobs:
  # Джоб для кеширования зависимостей
  cache:
    name: Cache dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

  # Джоб для обычной сборки и тестирования
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: cache

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Build with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean build   

  # Джоб для обычной сборки и тестирования
  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Run tests with Gradle
        run: |
          chmod +x gradlew
          ./gradlew clean test

    # Джоб для запуска приложения в Docker и повторного тестирования
  dockerized:
    name: Build and run tests in Docker
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      # Устанавливаем Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Сборка проекта и запуск тестов
      - name: Build and run tests (assemble .jar and run tests)
        run: |
          chmod +x gradlew
          ./gradlew assemble  # Собираем и запускаем тесты

      # Стартуем сервисы в Docker
      - name: Build and start services in Docker
        run: docker-compose -f docker-compose-test.yml up --build -d

      # Ждем, пока контейнеры не будут готовы
      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 20

      # Проверка логов контейнера
      - name: Check if container is running
        run: |
          docker ps -a
          docker logs my-app

      # Запуск тестов внутри Docker
      - name: Run tests inside Docker
        run: docker exec my-app /app/gradlew test

      # Остановка и удаление контейнеров
      - name: Stop and remove containers
        run: docker-compose -f docker-compose-test.yml down

  deploy:
    name: Deploy on Prod
    runs-on: ubuntu-latest
    needs: dockerized

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          IMAGE=ghcr.io/tpabka251/userservice
          docker build -t $IMAGE:latest -t $IMAGE:${{ github.sha }} .
          docker push $IMAGE:latest
          docker push $IMAGE:${{ github.sha }}

      - name: Deploy to k3s via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}            # IP или домен сервера
          username: ${{ secrets.SSH_USER }}          # пользователь для SSH
          key: ${{ secrets.SSH_PRIVATE_KEY }}        # приватный ключ (с кодовой фразой)
          passphrase: ${{ secrets.SSH_PASSPHRASE }}    # кодовая фраза к ключу
          script: |
            cd User
            git pull origin master
            kubectl apply -f k8s/deployment.yaml
            kubectl apply -f k8s/bd-service.yaml
            kubectl apply -f k8s/service.yaml
            kubectl rollout restart deployment/userservice
            kubectl rollout status deployment/userservice
